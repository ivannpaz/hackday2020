[{"/mnt/e/Develop/GoLang/hackday2020/web/src/index.js":"1","/mnt/e/Develop/GoLang/hackday2020/web/src/theme.js":"2","/mnt/e/Develop/GoLang/hackday2020/web/src/serviceWorker.js":"3","/mnt/e/Develop/GoLang/hackday2020/web/src/Components/App/App.js":"4","/mnt/e/Develop/GoLang/hackday2020/web/src/Components/Routing/Routing.js":"5","/home/ivan/code/hackday2020/web/src/index.js":"6","/home/ivan/code/hackday2020/web/src/theme.js":"7","/home/ivan/code/hackday2020/web/src/serviceWorker.js":"8","/home/ivan/code/hackday2020/web/src/Components/App/App.js":"9","/home/ivan/code/hackday2020/web/src/Components/Routing/Routing.js":"10","/home/ivan/code/hackday2020/web/src/Components/Menu/Menu.js":"11","/home/ivan/code/hackday2020/web/src/Components/SVG/SVG.js":"12"},{"size":783,"mtime":1608288983154,"results":"13","hashOfConfig":"14"},{"size":746,"mtime":1608288983359,"results":"15","hashOfConfig":"14"},{"size":5014,"mtime":1608288983343,"results":"16","hashOfConfig":"14"},{"size":1484,"mtime":1608292308065,"results":"17","hashOfConfig":"14"},{"size":3618,"mtime":1608292156616,"results":"18","hashOfConfig":"14"},{"size":931,"mtime":1608558415570,"results":"19","hashOfConfig":"20"},{"size":746,"mtime":1608292506650,"results":"21","hashOfConfig":"20"},{"size":5014,"mtime":1608292506650,"results":"22","hashOfConfig":"20"},{"size":1640,"mtime":1608562535720,"results":"23","hashOfConfig":"20"},{"size":4639,"mtime":1608561020050,"results":"24","hashOfConfig":"20"},{"size":626,"mtime":1608561291710,"results":"25","hashOfConfig":"20"},{"size":1321,"mtime":1608562003680,"results":"26","hashOfConfig":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"rct426",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1yy5gtz",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"/mnt/e/Develop/GoLang/hackday2020/web/src/index.js",[],["54","55"],"/mnt/e/Develop/GoLang/hackday2020/web/src/theme.js",[],"/mnt/e/Develop/GoLang/hackday2020/web/src/serviceWorker.js",[],"/mnt/e/Develop/GoLang/hackday2020/web/src/Components/App/App.js",[],"/mnt/e/Develop/GoLang/hackday2020/web/src/Components/Routing/Routing.js",[],"/home/ivan/code/hackday2020/web/src/index.js",[],["56","57"],"/home/ivan/code/hackday2020/web/src/theme.js",[],"/home/ivan/code/hackday2020/web/src/serviceWorker.js",[],"/home/ivan/code/hackday2020/web/src/Components/App/App.js",["58"],"/home/ivan/code/hackday2020/web/src/Components/Routing/Routing.js",["59"],"import React from \"react\";\nimport { Group } from \"@visx/group\";\nimport { Tree, hierarchy } from \"@visx/hierarchy\";\nimport { LinkHorizontal } from \"@visx/shape\";\nimport { LinearGradient } from \"@visx/gradient\";\n\nconst peach = \"#fd9b93\";\nconst pink = \"#fe6e9e\";\nconst blue = \"#03c0dc\";\nconst green = \"#26deb0\";\nconst plum = \"#71248e\";\nconst lightpurple = \"#374469\";\nconst white = \"#ffffff\";\nexport const background = \"#272b4d\";\n\n/** Handles rendering Root, Parent, and other Nodes. */\nclass TreeNode extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n\n  render() {\n    const { node } = this.props;\n    const width = 160;\n    const height = 30;\n    const centerX = -width / 2;\n    const centerY = -height / 2;\n    const isRoot = node.depth === 0;\n    const isParent = !!node.children;\n\n    if (isRoot) return <RootNode node={node} />;\n    if (isParent) return <RoutingNode node={node} />;\n\n    return (\n      <Group top={node.x} left={node.y}>\n        <rect\n          height={height}\n          width={width}\n          y={centerY}\n          x={centerX}\n          fill={lightpurple}\n          stroke={plum}\n          strokeWidth={0}\n          strokeDasharray=\"2,2\"\n          strokeOpacity={0.6}\n          rx={10}\n          onClick={() => {\n            console.log(\"Entering for\", node.data.description)\n          }}\n        />\n        <text\n          dy=\".33em\"\n          fontSize={10}\n          fontFamily=\"Arial\"\n          textAnchor=\"middle\"\n          fill={green}\n          style={{ pointerEvents: \"none\" }}\n        >\n          {node.data.name}\n        </text>\n      </Group>\n    );\n  }\n}\n\nfunction RootNode({ node }) {\n  return (\n    <Group top={node.x} left={node.y}>\n      <circle r={48} fill=\"url('#lg')\" />\n      <text\n        dy=\".24em\"\n        fontSize={12}\n        fontFamily=\"Arial\"\n        textAnchor=\"middle\"\n        fontWeight=\"bold\"\n        style={{ pointerEvents: \"none\" }}\n        fill={plum}\n      >\n        {node.data.name}\n      </text>\n    </Group>\n  );\n}\n\nclass RoutingNode extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n\n  render() {\n    const { node } = this.props;\n    const width = 140;\n    const height = 32;\n    const centerX = -width / 2;\n    const centerY = -height / 2;\n\n    const incr = 15\n    var pos = 0\n\n    var matchers = Object.keys(node.data.matchers).map(function(keyName, keyIndex) {\n      var val = <tspan key={keyIndex} x=\"0\" y={pos}>{keyName + \": \" + node.data.matchers[keyName]}</tspan>\n      pos += incr\n      return val\n    })\n\n    return (\n      <Group top={node.x} left={node.y}>\n        <rect\n          height={height}\n          width={width}\n          y={centerY}\n          x={centerX}\n          fill={background}\n          stroke={blue}\n          strokeWidth={0}\n          onClick={() => {\n            console.log(\"Entering for\", node.data.description)\n          }}\n          onMouseEnter={() => {\n            //\n          }}\n          onMouseLeave={() => {\n            //\n          }}\n        />\n\n        <text\n          dy=\".33em\"\n          fontSize={10}\n          fontFamily=\"Roboto\"\n          textAnchor=\"middle\"\n          style={{ pointerEvents: \"none\" }}\n          fill={white}\n        >\n          {matchers}\n        </text>\n\n      </Group>\n    );\n  }\n}\n\nconst defaultMargin = { top: 10, left: 80, right: 80, bottom: 10 };\n\nclass Routing extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n\n  render() {\n    const { rawTree, width, height, margin = defaultMargin } = this.props;\n    // eslint-disable-next-line\n    //const data = useMemo(() => hierarchy(rawTree), []);\n    const data = hierarchy(rawTree);\n    const yMax = height - margin.top - margin.bottom;\n    const xMax = width - margin.left - margin.right;\n\n    return width < 10 ? null : (\n      <svg width={width} height={height}>\n        <LinearGradient id=\"lg\" from={peach} to={pink} />\n        <rect width={width} height={height} rx={14} fill={background} />\n        <Tree root={data} size={[yMax, xMax]}>\n          {(tree) => (\n            <Group top={margin.top} left={margin.left}>\n              {tree.links().map((link, i) => (\n                <LinkHorizontal\n                  key={`link-${i}`}\n                  data={link}\n                  stroke={lightpurple}\n                  strokeWidth=\"1\"\n                  fill=\"none\"\n                />\n              ))}\n              {tree.descendants().map((node, i) => (\n                <TreeNode key={`node-${i}`} node={node} />\n              ))}\n            </Group>\n          )}\n        </Tree>\n      </svg>\n    );\n  }\n}\n\nexport default Routing;\n","/home/ivan/code/hackday2020/web/src/Components/Menu/Menu.js",[],"/home/ivan/code/hackday2020/web/src/Components/SVG/SVG.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"60","replacedBy":"64"},{"ruleId":"62","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":11,"column":8,"nodeType":"68","messageId":"69","endLine":11,"endColumn":11},{"ruleId":"66","severity":1,"message":"70","line":1,"column":17,"nodeType":"68","messageId":"69","endLine":1,"endColumn":24},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],["71"],["72"],"no-unused-vars","'SVG' is defined but never used.","Identifier","unusedVar","'useMemo' is defined but never used.","no-global-assign","no-unsafe-negation"]